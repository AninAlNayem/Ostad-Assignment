#include<bits/stdc++.h>
using namespace std;

const int mx=1e5+10;
bool vis[mx],recStack[mx];

vector<int>G[mx];

bool dfs(int u){

   vis[u]=1;
   recStack[u]=1;

   for(int i=0;i<G[u].size();i++){
      int v=G[u][i];
      if(!vis[v]){
        if(dfs(v)){
            return true;
        }
      }
      else if(recStack[v]){
        return true;
      }

   }
   recStack[u]=0;

return false;
}

bool isCycle(int nodes){

   memset(vis,0,sizeof vis);
   memset(recStack,0,sizeof recStack);

   for(int i=1;i<=nodes;i++){
      if(!vis[i]){
        if(dfs(i)){
           return true;;
        }
      }
   }
return false;
}


int main(){

   int nodes,edges;
   cin>>nodes>>edges;
   for(int i=1;i<=edges;i++){
      int u,v;
      cin>>u>>v;
      G[u].push_back(v);
   }

   bool res=isCycle(nodes);

   if(res==1){
     cout<<"Cycle Exists."<<"\n";
   }
   else{
     cout<<"No Cycle"<<"\n";
   }

return 0;
}
